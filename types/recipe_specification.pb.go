// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.21.5
// source: recipe_specification.proto

package types

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	structpb "google.golang.org/protobuf/types/known/structpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// RecipeSchema defines what types of recipes/policies a plugin can handle
// This is used for UI filtering and policy validation
type RecipeSchema struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Schema version for future compatibility
	Version int32 `protobuf:"varint,1,opt,name=version,proto3" json:"version,omitempty"`
	// Scheduling specification version this plugin supports
	ScheduleVersion int32 `protobuf:"varint,2,opt,name=schedule_version,json=scheduleVersion,proto3" json:"schedule_version,omitempty"`
	// Plugin identification
	PluginId      string `protobuf:"bytes,3,opt,name=plugin_id,json=pluginId,proto3" json:"plugin_id,omitempty"`
	PluginName    string `protobuf:"bytes,4,opt,name=plugin_name,json=pluginName,proto3" json:"plugin_name,omitempty"`
	PluginVersion int32  `protobuf:"varint,5,opt,name=plugin_version,json=pluginVersion,proto3" json:"plugin_version,omitempty"`
	// What resources this plugin can handle with their parameter constraints
	SupportedResources []*ResourcePattern `protobuf:"bytes,6,rep,name=supported_resources,json=supportedResources,proto3" json:"supported_resources,omitempty"`
	// Plugin requirements
	Requirements *PluginRequirements `protobuf:"bytes,8,opt,name=requirements,proto3" json:"requirements,omitempty"`
	// Plugin configuration
	Configuration *structpb.Struct `protobuf:"bytes,9,opt,name=configuration,proto3" json:"configuration,omitempty"`
}

func (x *RecipeSchema) Reset() {
	*x = RecipeSchema{}
	if protoimpl.UnsafeEnabled {
		mi := &file_recipe_specification_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecipeSchema) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecipeSchema) ProtoMessage() {}

func (x *RecipeSchema) ProtoReflect() protoreflect.Message {
	mi := &file_recipe_specification_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecipeSchema.ProtoReflect.Descriptor instead.
func (*RecipeSchema) Descriptor() ([]byte, []int) {
	return file_recipe_specification_proto_rawDescGZIP(), []int{0}
}

func (x *RecipeSchema) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *RecipeSchema) GetScheduleVersion() int32 {
	if x != nil {
		return x.ScheduleVersion
	}
	return 0
}

func (x *RecipeSchema) GetPluginId() string {
	if x != nil {
		return x.PluginId
	}
	return ""
}

func (x *RecipeSchema) GetPluginName() string {
	if x != nil {
		return x.PluginName
	}
	return ""
}

func (x *RecipeSchema) GetPluginVersion() int32 {
	if x != nil {
		return x.PluginVersion
	}
	return 0
}

func (x *RecipeSchema) GetSupportedResources() []*ResourcePattern {
	if x != nil {
		return x.SupportedResources
	}
	return nil
}

func (x *RecipeSchema) GetRequirements() *PluginRequirements {
	if x != nil {
		return x.Requirements
	}
	return nil
}

func (x *RecipeSchema) GetConfiguration() *structpb.Struct {
	if x != nil {
		return x.Configuration
	}
	return nil
}

// ResourcePattern defines a specific resource and what constraints its parameters support
type ResourcePattern struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Specific resource (e.g., ethereum.eth.transfer)
	ResourcePath *ResourcePath `protobuf:"bytes,1,opt,name=resource_path,json=resourcePath,proto3" json:"resource_path,omitempty"`
	// What constraint types each parameter of this resource supports
	ParameterCapabilities []*ParameterConstraintCapability `protobuf:"bytes,2,rep,name=parameter_capabilities,json=parameterCapabilities,proto3" json:"parameter_capabilities,omitempty"`
	// Whether this resource is required by the plugin
	Required bool `protobuf:"varint,3,opt,name=required,proto3" json:"required,omitempty"`
}

func (x *ResourcePattern) Reset() {
	*x = ResourcePattern{}
	if protoimpl.UnsafeEnabled {
		mi := &file_recipe_specification_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResourcePattern) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourcePattern) ProtoMessage() {}

func (x *ResourcePattern) ProtoReflect() protoreflect.Message {
	mi := &file_recipe_specification_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourcePattern.ProtoReflect.Descriptor instead.
func (*ResourcePattern) Descriptor() ([]byte, []int) {
	return file_recipe_specification_proto_rawDescGZIP(), []int{1}
}

func (x *ResourcePattern) GetResourcePath() *ResourcePath {
	if x != nil {
		return x.ResourcePath
	}
	return nil
}

func (x *ResourcePattern) GetParameterCapabilities() []*ParameterConstraintCapability {
	if x != nil {
		return x.ParameterCapabilities
	}
	return nil
}

func (x *ResourcePattern) GetRequired() bool {
	if x != nil {
		return x.Required
	}
	return false
}

// ParameterConstraintCapability defines what constraint types a parameter supports
type ParameterConstraintCapability struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Parameter name (e.g., "recipient", "amount")
	ParameterName string `protobuf:"bytes,1,opt,name=parameter_name,json=parameterName,proto3" json:"parameter_name,omitempty"`
	// Supported constraint types for this parameter
	SupportedTypes []ConstraintType `protobuf:"varint,2,rep,packed,name=supported_types,json=supportedTypes,proto3,enum=types.ConstraintType" json:"supported_types,omitempty"`
	// Whether this parameter must be constrained
	Required bool `protobuf:"varint,3,opt,name=required,proto3" json:"required,omitempty"`
}

func (x *ParameterConstraintCapability) Reset() {
	*x = ParameterConstraintCapability{}
	if protoimpl.UnsafeEnabled {
		mi := &file_recipe_specification_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ParameterConstraintCapability) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParameterConstraintCapability) ProtoMessage() {}

func (x *ParameterConstraintCapability) ProtoReflect() protoreflect.Message {
	mi := &file_recipe_specification_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParameterConstraintCapability.ProtoReflect.Descriptor instead.
func (*ParameterConstraintCapability) Descriptor() ([]byte, []int) {
	return file_recipe_specification_proto_rawDescGZIP(), []int{2}
}

func (x *ParameterConstraintCapability) GetParameterName() string {
	if x != nil {
		return x.ParameterName
	}
	return ""
}

func (x *ParameterConstraintCapability) GetSupportedTypes() []ConstraintType {
	if x != nil {
		return x.SupportedTypes
	}
	return nil
}

func (x *ParameterConstraintCapability) GetRequired() bool {
	if x != nil {
		return x.Required
	}
	return false
}

// PluginRequirements defines what the plugin needs to function
type PluginRequirements struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Minimum Vultisig version required
	MinVultisigVersion int32 `protobuf:"varint,1,opt,name=min_vultisig_version,json=minVultisigVersion,proto3" json:"min_vultisig_version,omitempty"`
	// Supported blockchain networks
	SupportedChains []string `protobuf:"bytes,2,rep,name=supported_chains,json=supportedChains,proto3" json:"supported_chains,omitempty"`
}

func (x *PluginRequirements) Reset() {
	*x = PluginRequirements{}
	if protoimpl.UnsafeEnabled {
		mi := &file_recipe_specification_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PluginRequirements) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PluginRequirements) ProtoMessage() {}

func (x *PluginRequirements) ProtoReflect() protoreflect.Message {
	mi := &file_recipe_specification_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PluginRequirements.ProtoReflect.Descriptor instead.
func (*PluginRequirements) Descriptor() ([]byte, []int) {
	return file_recipe_specification_proto_rawDescGZIP(), []int{3}
}

func (x *PluginRequirements) GetMinVultisigVersion() int32 {
	if x != nil {
		return x.MinVultisigVersion
	}
	return 0
}

func (x *PluginRequirements) GetSupportedChains() []string {
	if x != nil {
		return x.SupportedChains
	}
	return nil
}

var File_recipe_specification_proto protoreflect.FileDescriptor

var file_recipe_specification_proto_rawDesc = []byte{
	0x0a, 0x1a, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x1a, 0x10, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x0e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0xff, 0x02, 0x0a, 0x0c, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x29,
	0x0a, 0x10, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x6c, 0x75,
	0x67, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6c,
	0x75, 0x67, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x6c, 0x75,
	0x67, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x6c, 0x75, 0x67, 0x69,
	0x6e, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0d, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x47,
	0x0a, 0x13, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x61, 0x74, 0x74,
	0x65, 0x72, 0x6e, 0x52, 0x12, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x3d, 0x0a, 0x0c, 0x72, 0x65, 0x71, 0x75, 0x69,
	0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x0c, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x3d, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xc4, 0x01, 0x0a, 0x0f, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x12, 0x38, 0x0a, 0x0d, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x50, 0x61, 0x74, 0x68, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50,
	0x61, 0x74, 0x68, 0x12, 0x5b, 0x0a, 0x16, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x5f, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x43,
	0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x15, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73,
	0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x08, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x22, 0xa2, 0x01, 0x0a,
	0x1d, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72,
	0x61, 0x69, 0x6e, 0x74, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x25,
	0x0a, 0x0e, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3e, 0x0a, 0x0f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74,
	0x65, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x15,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0e, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64,
	0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65,
	0x64, 0x22, 0x71, 0x0a, 0x12, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x69,
	0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x30, 0x0a, 0x14, 0x6d, 0x69, 0x6e, 0x5f, 0x76,
	0x75, 0x6c, 0x74, 0x69, 0x73, 0x69, 0x67, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x6d, 0x69, 0x6e, 0x56, 0x75, 0x6c, 0x74, 0x69, 0x73,
	0x69, 0x67, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x10, 0x73, 0x75, 0x70,
	0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x43, 0x68,
	0x61, 0x69, 0x6e, 0x73, 0x42, 0x23, 0x5a, 0x21, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x76, 0x75, 0x6c, 0x74, 0x69, 0x73, 0x69, 0x67, 0x2f, 0x72, 0x65, 0x63, 0x69,
	0x70, 0x65, 0x73, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_recipe_specification_proto_rawDescOnce sync.Once
	file_recipe_specification_proto_rawDescData = file_recipe_specification_proto_rawDesc
)

func file_recipe_specification_proto_rawDescGZIP() []byte {
	file_recipe_specification_proto_rawDescOnce.Do(func() {
		file_recipe_specification_proto_rawDescData = protoimpl.X.CompressGZIP(file_recipe_specification_proto_rawDescData)
	})
	return file_recipe_specification_proto_rawDescData
}

var file_recipe_specification_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_recipe_specification_proto_goTypes = []interface{}{
	(*RecipeSchema)(nil),                  // 0: types.RecipeSchema
	(*ResourcePattern)(nil),               // 1: types.ResourcePattern
	(*ParameterConstraintCapability)(nil), // 2: types.ParameterConstraintCapability
	(*PluginRequirements)(nil),            // 3: types.PluginRequirements
	(*structpb.Struct)(nil),               // 4: google.protobuf.Struct
	(*ResourcePath)(nil),                  // 5: types.ResourcePath
	(ConstraintType)(0),                   // 6: types.ConstraintType
}
var file_recipe_specification_proto_depIdxs = []int32{
	1, // 0: types.RecipeSchema.supported_resources:type_name -> types.ResourcePattern
	3, // 1: types.RecipeSchema.requirements:type_name -> types.PluginRequirements
	4, // 2: types.RecipeSchema.configuration:type_name -> google.protobuf.Struct
	5, // 3: types.ResourcePattern.resource_path:type_name -> types.ResourcePath
	2, // 4: types.ResourcePattern.parameter_capabilities:type_name -> types.ParameterConstraintCapability
	6, // 5: types.ParameterConstraintCapability.supported_types:type_name -> types.ConstraintType
	6, // [6:6] is the sub-list for method output_type
	6, // [6:6] is the sub-list for method input_type
	6, // [6:6] is the sub-list for extension type_name
	6, // [6:6] is the sub-list for extension extendee
	0, // [0:6] is the sub-list for field type_name
}

func init() { file_recipe_specification_proto_init() }
func file_recipe_specification_proto_init() {
	if File_recipe_specification_proto != nil {
		return
	}
	file_constraint_proto_init()
	file_resource_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_recipe_specification_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecipeSchema); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_recipe_specification_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResourcePattern); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_recipe_specification_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ParameterConstraintCapability); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_recipe_specification_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PluginRequirements); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_recipe_specification_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_recipe_specification_proto_goTypes,
		DependencyIndexes: file_recipe_specification_proto_depIdxs,
		MessageInfos:      file_recipe_specification_proto_msgTypes,
	}.Build()
	File_recipe_specification_proto = out.File
	file_recipe_specification_proto_rawDesc = nil
	file_recipe_specification_proto_goTypes = nil
	file_recipe_specification_proto_depIdxs = nil
}
